---
published: true
title:  "[Toy] 01 orderOfPresentation"
excerpt: ""

categories:
  - Algorithm
tags:
  - [Toy, Algorithm, JavaScript, Permutation]

toc: true
toc_sticky: true
 
date: 2022-03-01 20:06:30
last_modified_at: 2022-03-01 20:06:30
---

# 문제
말썽꾸러기 김코딩은 오늘도 장난을 치다가 조별 발표 순서가 담긴 통을 쏟고 말았습니다.  

선생님께서는 미리 모든 발표 순서의 경우의 수를 저장해 놓았지만 김코딩의 버릇을 고치기 위해 문제를 내겠다고 말씀하셨습니다.  

김코딩은 모든 조별 발표 순서에 대한 경우의 수를 차례대로 구한 뒤 발표 순서를 말하면 이 발표 순서가 몇 번째 경우의 수인지를 대답해야 합니다.  

총 조의 수 N과 선생님이 말씀하시는 발표 순서 k가 주어질 때, 김코딩이 정답을 말 할 수 있게 올바른 리턴 값을 구하세요.  

모든 경우의 수가 담긴 배열은 번호가 작을수록 앞에 위치한다고 가정합니다.  
ex) N = 3일경우, [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

## 입력
### 인자 1:N
* `Number` 타입의 1 <= N <= 12인 조의 개수  

### 인자 2: K
* `Number` 타입의 Array (0 <= index)  

ex) n이 3이고 k가 [2, 3, 1]일 경우  
모든 경우의 수를 2차원 배열에 담는다면 [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]이 되고,  
반환하는 값은 3이 됩니다.

## 주의사항
* k내에 중복되는 요소는 없다고 가정합니다.  

## 입출력 예시
```js
let output = orderOfPresentation(3, [2, 3, 1]);
console.log(output); // 3

output = orderOfPresentation(5, [1, 3, 2, 4, 5])
console.log(output); // 6
```
<br>

# 풀이  

## 로직  
이 문제는 순열의 경우의 수를 구하는 것이 우선 해결되어야 한다.  
순열을 알려면 조합도 알아야 하는데, 이는 다음에 포스팅하도록 하겠다.  
_이후 링크를 붙이도록 하자_  

서로 다른 n개의 물건 중에서 r개를 택하여 한 줄로 배열하는 것을 순열이라 하고, r개 택한 종류가 같다고 해도 배열된 순서가 다르다면 이 또한 하나의 경우의 수로 따진다.  
조합은 순서에 상관없이 선택한 것이라면, 순열은 순서를 따진다는 것이 차이점이다.  
이러한 순열을 수학에서는 nPr로 나타낸다.  
이러한 수학 공식을 이용하면 코드로도 쉽게 나타낼 수 있다.  

수학에서는 nPr을 구하라고 하면  
>$$
_nP_r = \frac{n!}{(n-r)!} = \frac{n \times (n-1) \times (n-2) \times \cdots \times 1}{(n-r) \times (n-r-1) \times (n-r-2) \times \cdots \times 1}
 = n \times \cdots \times (n-r+1)
$$

위와 같은 '경우의 수'를 구할 수 있을 뿐 종류를 구하진 않는다.  
그러나 원리를 이해하면 문제를 풀 때 필요한 알고리즘을 구성할 수 있다.  

[1,2,3] 중 2개를 골라 나열하라고 한다면 어떻게 풀어야 할까?  

우선 [1,2,3] 중 한 개를 골라낸다면 [1], [2], [3] 세 가지라고 할 수 있다.  
이후 남은 두 가지([2,3], [1,3], [1,2]) 중에서 또 하나를 골라야 한다.  그러면 각각 두 가지씩 고를 수 있을 것이다.  

감이 왔다면 아! 하게 될 것이다.  
순열은 재귀함수로 풀 수 있고, 그 재귀함수는 n개 중 1개 고르는 상황을 반복하면 된다.  
언제까지? r개가 골라질 때까지!  

```js
// [1,2,3,4] 중 n개를 골라 순열을 나타내야 하는 상황이라면?
// 정의한 재귀함수를 permutation(순열)이라고 하자.
1(fixed) => permutation([2, 3, 4]) => 2(fixed) => permutation([3, 4]) => ...
2(fixed) => permutation([1, 3, 4]) => 1(fixed) => permutation([3, 4]) => ...
3(fixed) => permutation([1, 2, 4]) => 1(fixed) => permutation([2, 4]) => ...
4(fixed) => permutation([1, 2, 3]) => 1(fixed) => permutation([2, 3]) => ...
```

### 순열 예시
```js
Input: [1, 2, 3] 중 3개 고르기
Output: [
  [ 1, 2, 3 ], [ 1, 3, 2 ],
  [ 2, 1, 3 ], [ 2, 3, 1 ],
  [ 3, 1, 2 ], [ 3, 2, 1 ],
]

Input: [1,2,3,4] 중 3개 고르기
Output: [
  [ 1, 2, 3 ], [ 1, 2, 4 ],
  [ 1, 3, 2 ], [ 1, 3, 4 ],
  [ 1, 4, 2 ], [ 1, 4, 3 ],
  [ 2, 1, 3 ], [ 2, 1, 4 ],
  [ 2, 3, 1 ], [ 2, 3, 4 ],
  [ 2, 4, 1 ], [ 2, 4, 3 ],
  [ 3, 1, 2 ], [ 3, 1, 4 ],
  [ 3, 2, 1 ], [ 3, 2, 4 ],
  [ 3, 4, 1 ], [ 3, 4, 2 ],
  [ 4, 1, 2 ], [ 4, 1, 3 ],
  [ 4, 2, 1 ], [ 4, 2, 3 ],
  [ 4, 3, 1 ], [ 4, 3, 2 ] 
  ]
```

### 이용해야 하는 기술 코드
```js

```

<br>

### 맞는 배열을 찾기 = findIndex()  
순열을 구하는 법은 알았으니 다음은 발표순서가 몇 번째인지 골라야 한다.  
그 방법에 대해 `findIndex()` 메소드를 사용하고자 한다.

```js
arr.findIndex(callback(element[, index[, array]])[, thisArg])
```

콜백 함수를 이용하여 그에 해당하는 값의 index를 찾아주는 메소드이다.

### 해답 코드
```js
// 해답 적을 코드
```
